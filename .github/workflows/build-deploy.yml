name: Build and Deploy

on:
  workflow_dispatch:
  push:
    branches:
      - dev
      - master

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17

      - name: Grant execute permission for mvnw
        run: chmod +x mvnw

      - name: Build with maven
        run: ./mvnw clean install

      - name: Set image name with branch
        run: |
          echo "BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
          echo "IMAGE_NAME=ghcr.io/${{ github.repository }}" >> $GITHUB_ENV

      - name: Log in to the Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ env.BRANCH }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache,mode=max

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs:
      - build

    steps:
      - name: Set image name with branch
        run: |
          echo "BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
          echo "IMAGE_NAME=ghcr.io/${{ github.repository }}" >> $GITHUB_ENV
      

      - name: Set environment variable
        run: |
          if [[ ${{ env.BRANCH }} == dev ]]; then
            echo "ENV_TYPE=dev" >> $GITHUB_ENV
          else
            echo "ENV_TYPE=prod" >> $GITHUB_ENV
          fi

      - name: Deploy to host
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            sudo docker pull ${{ env.IMAGE_NAME }}:${{ env.BRANCH }}
            cd ${{ secrets.MICROSERVICE_REPO }}
            sudo docker-compose --env-file .env.${{ env.ENV_TYPE }} -f docker-compose.${{ env.ENV_TYPE }}.yaml up -d
            sudo docker image prune -f